// Code generated by goyacc localedef.y. DO NOT EDIT.

//line localedef.y:2
package locale

import __yyfmt__ "fmt"

//line localedef.y:2

import (
	"strconv"
	"strings"
)

var def Def

// TODO: Why don't the tokens have the value I expect in tok.yys?
func assignMonetaryString(tok yySymType, value string) {
	switch tok.val {
	//case INT_CURR_SYMBOL:
	case "int_curr_symbol":
		def.monetary.intCurrSymbol = value
		//default:
		//panic("NYI" + value)
	}
}

func assignMonetaryNumber(tok int, value string) {
	n, err := strconv.Atoi(value)
	if err != nil {
		panic("Can't convert " + value + " to integer")
	}
	switch tok {
	case INT_FRAC_DIGITS_STR:
		def.monetary.intFracDigits = n
	default:
		//panic("NYI" + value)
	}
}

func assignMonetaryGrouping(tok int, value string) {
	vals := strings.Split(value, ";")
	g := make([]int, len(vals))
	var err error
	for i, v := range vals {
		g[i], err = strconv.Atoi(v)
		if err != nil {
			panic("Err: " + err.Error())
		}
	}
	def.monetary.monGrouping = g
}

//line localedef.y:48
type yySymType struct {
	yys int
	val string
}

const LOC_NAME = 57346
const CHAR = 57347
const NUMBER = 57348
const COLLSYMBOL = 57349
const COLLELEMENT = 57350
const CHARSYMBOL = 57351
const OCTAL_CHAR = 57352
const HEX_CHAR = 57353
const DECIMAL_CHAR = 57354
const CHARCLASS = 57355
const ELLIPSIS = 57356
const EXTENDED_REG_EXP = 57357
const EOL = 57358
const ESCAPE_CHAR_STR = 57359
const COMMENT_CHAR_STR = 57360
const COPY_STR = 57361
const LC_CTYPE_STR = 57362
const CHARCLASS_STR = 57363
const UPPER_STR = 57364
const LOWER_STR = 57365
const ALPHA_STR = 57366
const DIGIT_STR = 57367
const PUNCT_STR = 57368
const XDIGIT_STR = 57369
const SPACE_STR = 57370
const PRINT_STR = 57371
const GRAPH_STR = 57372
const BLANK_STR = 57373
const CNTRL_STR = 57374
const ALNUM_STR = 57375
const TOUPPER_STR = 57376
const TOLOWER_STR = 57377
const LC_COLLATE_STR = 57378
const COLLATING_SYMBOL_STR = 57379
const COLLATING_ELEMENT_STR = 57380
const ORDER_START_STR = 57381
const FORWARD_STR = 57382
const BACKWARD_STR = 57383
const POSITION_STR = 57384
const UNDEFINED_STR = 57385
const IGNORE_STR = 57386
const END_STR = 57387
const LC_TIME_STR = 57388
const ERA_STR = 57389
const ERA_D_FMT_STR = 57390
const ERA_T_FMT_STR = 57391
const ALT_DIGITS_STR = 57392
const ERA_D_T_FMT_STR = 57393
const AM_PM_STR = 57394
const D_T_FMT_STR = 57395
const D_FMT_STR = 57396
const T_FMT_STR = 57397
const T_FMT_AMPM_STR = 57398
const ABDAY_STR = 57399
const DAY_STR = 57400
const ABMON_STR = 57401
const MON_STR = 57402
const LC_NUMERIC_STR = 57403
const DECIMAL_POINT_STR = 57404
const THOUSANDS_SEP_STR = 57405
const LC_MONETARY_STR = 57406
const INT_P_SIGN_POSN_STR = 57407
const INT_N_CS_PRECEDES_STR = 57408
const INT_P_CS_PRECEDES_STR = 57409
const P_SIGN_POSN_STR = 57410
const N_CS_PRECEDES_STR = 57411
const P_CS_PRECEDES_STR = 57412
const INT_FRAC_DIGITS_STR = 57413
const FRAC_DIGITS_STR = 57414
const P_SEP_BY_SPACE_STR = 57415
const N_SEP_BY_SPACE_STR = 57416
const N_SIGN_POSN_STR = 57417
const INT_P_SEP_BY_SPACE_STR = 57418
const INT_N_SEP_BY_SPACE_STR = 57419
const INT_N_SIGN_POSN_STR = 57420
const NEGATIVE_SIGN_STR = 57421
const POSITIVE_SIGN_STR = 57422
const MON_DECIMAL_POINT_STR = 57423
const INT_CURR_SYMBOL_STR = 57424
const CURRENCY_SYMBOL_STR = 57425
const MON_THOUSANDS_SEP_STR = 57426
const LC_MESSAGES_STR = 57427
const NOEXPR_STR = 57428
const YESEXPR_STR = 57429
const FROM_STR = 57430
const ORDER_END_STR = 57431
const MON_GROUPING_STR = 57432
const GROUPING_STR = 57433
const NEGATIVE_ONE_STR = 57434
const TWO_DOUBLE_QUOTE_STR = 57435

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LOC_NAME",
	"CHAR",
	"NUMBER",
	"COLLSYMBOL",
	"COLLELEMENT",
	"CHARSYMBOL",
	"OCTAL_CHAR",
	"HEX_CHAR",
	"DECIMAL_CHAR",
	"CHARCLASS",
	"ELLIPSIS",
	"EXTENDED_REG_EXP",
	"EOL",
	"ESCAPE_CHAR_STR",
	"COMMENT_CHAR_STR",
	"COPY_STR",
	"LC_CTYPE_STR",
	"CHARCLASS_STR",
	"UPPER_STR",
	"LOWER_STR",
	"ALPHA_STR",
	"DIGIT_STR",
	"PUNCT_STR",
	"XDIGIT_STR",
	"SPACE_STR",
	"PRINT_STR",
	"GRAPH_STR",
	"BLANK_STR",
	"CNTRL_STR",
	"ALNUM_STR",
	"TOUPPER_STR",
	"TOLOWER_STR",
	"LC_COLLATE_STR",
	"COLLATING_SYMBOL_STR",
	"COLLATING_ELEMENT_STR",
	"ORDER_START_STR",
	"FORWARD_STR",
	"BACKWARD_STR",
	"POSITION_STR",
	"UNDEFINED_STR",
	"IGNORE_STR",
	"END_STR",
	"LC_TIME_STR",
	"ERA_STR",
	"ERA_D_FMT_STR",
	"ERA_T_FMT_STR",
	"ALT_DIGITS_STR",
	"ERA_D_T_FMT_STR",
	"AM_PM_STR",
	"D_T_FMT_STR",
	"D_FMT_STR",
	"T_FMT_STR",
	"T_FMT_AMPM_STR",
	"ABDAY_STR",
	"DAY_STR",
	"ABMON_STR",
	"MON_STR",
	"LC_NUMERIC_STR",
	"DECIMAL_POINT_STR",
	"THOUSANDS_SEP_STR",
	"LC_MONETARY_STR",
	"INT_P_SIGN_POSN_STR",
	"INT_N_CS_PRECEDES_STR",
	"INT_P_CS_PRECEDES_STR",
	"P_SIGN_POSN_STR",
	"N_CS_PRECEDES_STR",
	"P_CS_PRECEDES_STR",
	"INT_FRAC_DIGITS_STR",
	"FRAC_DIGITS_STR",
	"P_SEP_BY_SPACE_STR",
	"N_SEP_BY_SPACE_STR",
	"N_SIGN_POSN_STR",
	"INT_P_SEP_BY_SPACE_STR",
	"INT_N_SEP_BY_SPACE_STR",
	"INT_N_SIGN_POSN_STR",
	"NEGATIVE_SIGN_STR",
	"POSITIVE_SIGN_STR",
	"MON_DECIMAL_POINT_STR",
	"INT_CURR_SYMBOL_STR",
	"CURRENCY_SYMBOL_STR",
	"MON_THOUSANDS_SEP_STR",
	"LC_MESSAGES_STR",
	"NOEXPR_STR",
	"YESEXPR_STR",
	"FROM_STR",
	"ORDER_END_STR",
	"MON_GROUPING_STR",
	"GROUPING_STR",
	"NEGATIVE_ONE_STR",
	"TWO_DOUBLE_QUOTE_STR",
	"'\"'",
	"';'",
	"'('",
	"','",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 468

var yyAct = [...]int{

	248, 199, 226, 204, 190, 179, 166, 173, 165, 236,
	145, 149, 131, 247, 156, 203, 181, 69, 105, 139,
	315, 228, 234, 140, 141, 142, 143, 272, 230, 134,
	225, 146, 97, 309, 305, 138, 92, 90, 88, 86,
	84, 82, 80, 81, 83, 85, 87, 89, 91, 93,
	79, 78, 76, 74, 75, 77, 135, 159, 231, 196,
	195, 94, 205, 92, 90, 88, 86, 84, 82, 80,
	81, 83, 85, 87, 89, 91, 93, 79, 78, 76,
	74, 75, 77, 151, 185, 184, 277, 265, 94, 261,
	257, 139, 244, 228, 176, 140, 141, 142, 143, 182,
	230, 291, 290, 268, 178, 177, 172, 186, 229, 240,
	139, 206, 285, 286, 140, 141, 142, 143, 251, 232,
	310, 253, 200, 216, 207, 213, 193, 211, 191, 259,
	231, 65, 70, 201, 202, 139, 192, 285, 286, 140,
	141, 142, 143, 181, 139, 175, 136, 215, 140, 141,
	142, 143, 60, 61, 59, 150, 159, 139, 58, 227,
	64, 140, 141, 142, 143, 278, 262, 57, 262, 258,
	221, 139, 192, 237, 175, 140, 141, 142, 143, 139,
	229, 157, 160, 140, 141, 142, 143, 133, 161, 100,
	101, 54, 53, 187, 218, 174, 208, 252, 233, 308,
	96, 180, 217, 62, 214, 313, 212, 312, 33, 256,
	60, 61, 59, 269, 154, 67, 66, 162, 102, 263,
	311, 301, 267, 153, 287, 271, 297, 67, 66, 292,
	237, 275, 288, 304, 167, 168, 169, 284, 276, 279,
	132, 283, 282, 100, 101, 163, 299, 152, 294, 289,
	5, 293, 20, 274, 28, 6, 7, 294, 20, 298,
	295, 62, 302, 222, 294, 266, 303, 264, 21, 167,
	168, 169, 102, 306, 21, 260, 255, 28, 25, 227,
	284, 307, 254, 139, 25, 157, 160, 140, 141, 142,
	143, 250, 161, 24, 171, 249, 23, 246, 245, 24,
	241, 235, 23, 223, 219, 209, 314, 139, 130, 129,
	104, 140, 141, 142, 143, 128, 270, 22, 273, 127,
	126, 162, 201, 22, 118, 119, 120, 122, 121, 109,
	114, 115, 116, 117, 110, 111, 112, 113, 118, 119,
	120, 122, 121, 109, 114, 115, 116, 117, 110, 111,
	112, 113, 49, 125, 124, 170, 123, 243, 242, 148,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 50, 51, 139, 30, 49, 300, 140,
	141, 142, 143, 32, 133, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 50, 51,
	139, 29, 281, 239, 140, 141, 142, 143, 139, 210,
	238, 239, 140, 141, 142, 143, 296, 198, 189, 4,
	3, 108, 27, 26, 107, 106, 103, 19, 197, 99,
	194, 98, 95, 18, 188, 73, 72, 183, 71, 68,
	17, 63, 16, 224, 158, 164, 220, 155, 56, 55,
	52, 15, 147, 144, 35, 137, 34, 31, 14, 280,
	13, 12, 11, 10, 9, 8, 2, 1,
}
var yyPact = [...]int{

	238, -1000, 238, 232, -1000, -1000, 396, 371, -1000, -1000,
	-1000, -1000, -1000, -1000, 364, 173, 141, -2, 181, 291,
	340, 338, 337, 304, 303, 299, 232, -1000, -1000, 293,
	292, 339, 52, -1000, 370, -65, 346, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 110, 52, -1000, 115, 278, -1000, -1000, 229,
	348, 286, 12, 129, 52, -1000, 11, 10, -29, 52,
	-1000, -9, 101, 412, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 127, 52, -1000, -34, 411,
	-1000, -1000, -1000, 277, 52, -1000, -32, -32, -32, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 176, 289, -1000, 405, 111, -1000, -1000,
	-1000, -1000, -1000, -1000, 109, -1000, 370, 107, -1000, -1000,
	158, 288, -1000, -1000, -1000, 174, -1000, 287, 14, -1000,
	-1000, -1000, -1000, -1000, 103, -75, -1000, -1000, -1000, -1000,
	285, -1000, 403, -1000, -1000, 24, 284, 343, 342, -1000,
	-1000, 28, 282, 281, 370, -1000, 279, 275, 102, -1000,
	-1000, -1000, 60, 266, 260, 370, -1000, 74, -1000, -1000,
	-1000, 83, 259, 73, -1000, 370, 251, 71, 249, 142,
	9, -1000, 302, -1000, -65, -70, -1000, 305, 237, 110,
	-1000, -1000, 222, -1000, 70, -1000, -1000, -1000, -1000, 395,
	-1000, -1000, -1000, 194, 194, -1000, 130, -1000, -1000, -1000,
	216, 100, 8, 7, 213, 98, -1000, 166, -1000, -1000,
	-1000, -1000, 410, 210, 91, -1000, 152, -1000, 372, 205,
	88, -1000, -32, 139, -1000, -1000, -1000, -1000, -1000, -1000,
	-61, -1000, 370, -1000, -1000, -1000, -1000, -1000, 86, 105,
	26, -1000, -75, -1000, -1000, -1000, -1000, 204, -1000, -1000,
	191, 189, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 370, -78, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 467, 466, 420, 419, 250, 465, 464, 463, 462,
	461, 460, 13, 0, 9, 459, 29, 458, 457, 12,
	208, 456, 455, 454, 453, 452, 10, 451, 450, 11,
	191, 449, 167, 158, 448, 447, 446, 445, 8, 6,
	14, 444, 443, 2, 442, 441, 7, 131, 440, 439,
	5, 132, 438, 437, 436, 435, 434, 433, 432, 4,
	32, 431, 430, 429, 428, 427, 426, 1, 18, 425,
	15, 424, 3, 421,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 4, 4, 3, 3, 5,
	5, 5, 5, 5, 5, 12, 12, 13, 13, 13,
	13, 13, 14, 14, 14, 14, 14, 14, 15, 15,
	16, 16, 6, 6, 17, 18, 18, 20, 20, 20,
	25, 25, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
	24, 24, 26, 19, 7, 7, 27, 28, 28, 31,
	31, 31, 31, 32, 33, 33, 30, 34, 34, 37,
	37, 38, 38, 39, 39, 39, 35, 35, 40, 40,
	40, 41, 41, 41, 41, 42, 42, 42, 43, 43,
	43, 43, 43, 43, 43, 36, 29, 8, 8, 44,
	45, 45, 47, 47, 46, 9, 9, 48, 49, 49,
	51, 51, 51, 51, 52, 52, 52, 52, 52, 52,
	53, 53, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 55, 56, 56, 50,
	10, 10, 57, 58, 58, 60, 60, 61, 61, 62,
	62, 63, 64, 64, 59, 11, 11, 65, 66, 66,
	68, 68, 68, 69, 69, 69, 69, 69, 71, 71,
	71, 71, 73, 73, 73, 73, 73, 70, 70, 72,
	67,
}
var yyR2 = [...]int{

	0, 2, 1, 2, 1, 3, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 1, 1, 1, 2, 1,
	1, 3, 3, 5, 2, 2, 1, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	3, 1, 5, 3, 3, 5, 2, 1, 2, 2,
	2, 1, 1, 3, 2, 5, 3, 2, 3, 3,
	1, 3, 1, 1, 1, 1, 2, 1, 2, 3,
	2, 1, 1, 1, 1, 3, 2, 1, 0, 1,
	1, 3, 3, 1, 1, 2, 3, 3, 5, 2,
	2, 1, 5, 5, 3, 3, 5, 2, 2, 1,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 5, 2, 2, 1, 3, 3, 1, 1, 3,
	1, 1, 1, 3, 3, 3, 5, 2, 2, 1,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	3,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, 17, 18, -6, -7,
	-8, -9, -10, -11, -17, -27, -44, -48, -57, -65,
	20, 36, 85, 64, 61, 46, -3, -4, -5, 5,
	5, -18, 19, -20, -21, -23, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 13,
	34, 35, -28, 19, -30, -31, -34, -32, -33, 39,
	37, 38, 88, -45, 19, -47, 87, 86, -49, 19,
	-51, -52, -54, -55, 82, 83, 81, 84, 80, 79,
	71, 72, 70, 73, 69, 74, 68, 75, 67, 76,
	66, 77, 65, 78, 90, -58, 19, -60, -61, -63,
	62, 63, 91, -66, 19, -68, -69, -71, -73, 52,
	57, 58, 59, 60, 53, 54, 55, 56, 47, 48,
	49, 51, 50, 16, 16, 16, 16, 16, 16, 16,
	16, -19, -20, 45, -16, 4, 94, -22, -13, 5,
	9, 10, 11, 12, -24, -26, 96, -25, 13, -29,
	45, -16, -30, -32, -33, -35, -40, 7, -41, -13,
	8, 14, 43, 16, -37, -38, -39, 40, 41, 42,
	7, 8, 94, -46, -47, 45, -16, 94, 94, -50,
	-51, 45, -16, -53, 94, 93, 6, 92, -56, 6,
	-59, -60, 45, -16, -62, 94, 93, -64, 6, -67,
	-68, 45, -16, -70, -72, 94, -72, -70, 20, 16,
	4, 16, 95, 16, 95, -13, 16, 95, 36, 16,
	-36, -40, 89, 16, -42, 16, -43, -13, 7, 94,
	14, 44, 16, 95, 97, 16, -14, -13, 7, 8,
	85, 16, 15, 15, 64, 16, 16, -12, -13, 16,
	16, 16, 95, 61, 16, 16, -12, 16, 95, 46,
	16, 16, 95, -12, 16, 16, 16, -19, 94, -13,
	14, -26, 97, 13, 16, -29, 16, 16, 95, -14,
	-15, 7, -38, -39, -13, 7, 8, 94, 16, -46,
	94, 94, 16, -50, -13, 94, 6, 16, -59, 94,
	6, 16, -67, -72, 94, 95, -13, -43, 94, 7,
	94, 16, 16, 16, -13, 98,
}
var yyDef = [...]int{

	0, -2, 0, 2, 4, 8, 0, 0, 9, 10,
	11, 12, 13, 14, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 7, 0,
	0, 0, 0, 36, 0, 0, 0, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	58, 59, 0, 0, 67, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	119, 0, 0, 0, 124, 125, 126, 127, 128, 129,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 0, 0, 154, 0, 0,
	157, 158, 161, 0, 0, 169, 0, 0, 0, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 34, 66, 109, 117, 152, 167, 5,
	6, 32, 35, 0, 0, 30, 0, 0, 57, 17,
	18, 19, 20, 21, 0, 61, 0, 0, 41, 64,
	0, 0, 68, 69, 70, 0, 87, 0, 98, 91,
	92, 93, 94, 77, 0, 80, 82, 83, 84, 85,
	0, 74, 0, 107, 110, 0, 0, 0, 0, 115,
	118, 0, 0, 0, 0, 131, 0, 0, 0, 147,
	150, 153, 0, 0, 0, 0, 160, 0, 162, 165,
	168, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 37, 0, 38, 0, 0, 39, 0, 0, 0,
	76, 86, 0, 88, 0, 90, 97, 99, 100, 0,
	103, 104, 78, 0, 0, 73, 0, 25, 26, 27,
	0, 0, 0, 0, 0, 0, 120, 0, 16, 121,
	122, 123, 0, 0, 0, 155, 0, 156, 0, 0,
	0, 170, 0, 0, 171, 172, 63, 33, 31, 55,
	0, 60, 0, 40, 106, 65, 105, 89, 96, 0,
	0, 26, 79, 81, 22, 23, 24, 0, 114, 108,
	0, 0, 149, 116, 15, 130, 148, 164, 151, 159,
	163, 190, 166, 187, 189, 0, 0, 95, 101, 28,
	102, 75, 112, 113, 56, 62,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 3, 3, 3, 3,
	96, 98, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 95,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line localedef.y:189
		{
			yyVAL.val = yyDollar[1].val + string(yyDollar[2].val)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:418
		{
			assignMonetaryString(yyDollar[1], yyDollar[2].val)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:419
		{
			assignMonetaryNumber(yyDollar[1].yys, yyDollar[2].val)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:420
		{
			assignMonetaryNumber(yyDollar[1].yys, "-1")
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:421
		{
			assignMonetaryGrouping(yyDollar[1].yys, yyDollar[2].val)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:431
		{
			yyVAL = yyDollar[2]
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line localedef.y:451
		{
			yyVAL.val = yyDollar[1].val + ";" + yyDollar[3].val
		}
	}
	goto yystack /* stack new state and value */
}
